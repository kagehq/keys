# GitHub Actions + Kage Keys CI/CD Integration
# 
# This workflow shows how to integrate Kage Keys with GitHub Actions
# for secure, scoped access to external APIs during CI/CD.

name: Kage Keys CI/CD Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  KAGE_KEYS_BROKER_URL: ${{ secrets.KAGE_KEYS_BROKER_URL }}
  KAGE_KEYS_BROKER_TOKEN: ${{ secrets.KAGE_KEYS_BROKER_TOKEN }}

jobs:
  # Job 1: Generate one-time agent tokens for deployment
  generate-tokens:
    runs-on: ubuntu-latest
    outputs:
      openai-token: ${{ steps.generate-openai-token.outputs.token }}
      github-token: ${{ steps.generate-github-token.outputs.token }}
      aws-token: ${{ steps.generate-aws-token.outputs.token }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install Kage Keys
      run: npm install -g @kagehq/keys
      
    - name: Generate OpenAI token for AI operations
      id: generate-openai-token
      run: |
        TOKEN=$(kage-keys create-token \
          --agent "ci-openai-bot" \
          --scope "openai:chat.create,openai:embeddings.create" \
          --duration 1800 \
          --broker-url "$KAGE_KEYS_BROKER_URL" \
          --broker-token "$KAGE_KEYS_BROKER_TOKEN")
        echo "token=$TOKEN" >> $GITHUB_OUTPUT
        echo "✅ Generated OpenAI token (expires in 30 minutes)"
        
    - name: Generate GitHub token for repository operations
      id: generate-github-token
      run: |
        TOKEN=$(kage-keys create-token \
          --agent "ci-github-bot" \
          --scope "github:repos.read,github:issues.read,github:pulls.read" \
          --duration 1800 \
          --broker-url "$KAGE_KEYS_BROKER_URL" \
          --broker-token "$KAGE_KEYS_BROKER_TOKEN")
        echo "token=$TOKEN" >> $GITHUB_OUTPUT
        echo "✅ Generated GitHub token (expires in 30 minutes)"
        
    - name: Generate AWS token for deployment
      id: generate-aws-token
      run: |
        TOKEN=$(kage-keys create-token \
          --agent "ci-aws-bot" \
          --scope "aws:lambda.update,aws:s3.put,aws:cloudformation.create" \
          --duration 1800 \
          --broker-url "$KAGE_KEYS_BROKER_URL" \
          --broker-token "$KAGE_KEYS_BROKER_TOKEN")
        echo "token=$TOKEN" >> $GITHUB_OUTPUT
        echo "✅ Generated AWS token (expires in 30 minutes)"

  # Job 2: AI-powered code analysis
  ai-code-analysis:
    runs-on: ubuntu-latest
    needs: generate-tokens
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: AI-powered code review
      env:
        OPENAI_API_KEY: ${{ needs.generate-tokens.outputs.openai-token }}
      run: |
        echo "🤖 Running AI-powered code analysis..."
        
        # Use the scoped OpenAI token for code analysis
        node -e "
          const { withAgentKey } = require('@kagehq/keys');
          
          async function analyzeCode() {
            try {
              const result = await withAgentKey(
                process.env.OPENAI_API_KEY,
                async (token) => {
                  // This would be your actual AI code analysis logic
                  console.log('🔐 Using authenticated OpenAI token for code analysis');
                  
                  // Example: Analyze code quality, security, etc.
                  const response = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                      'Authorization': \`Bearer \${token}\`,
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      model: 'gpt-4',
                      messages: [{
                        role: 'user',
                        content: 'Analyze this codebase for security vulnerabilities and code quality issues: ' + 
                                'https://github.com/${{ github.repository }}/tree/${{ github.sha }}'
                      }],
                      max_tokens: 1000
                    })
                  });
                  
                  const data = await response.json();
                  return data.choices[0]?.message?.content || 'No analysis available';
                }
              );
              
              console.log('📊 AI Code Analysis Result:');
              console.log(result);
              
            } catch (error) {
              console.error('❌ Error in AI code analysis:', error.message);
              process.exit(1);
            }
          }
          
          analyzeCode();
        "
        
    - name: Comment analysis results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        GITHUB_TOKEN: ${{ needs.generate-tokens.outputs.github-token }}
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          // Check if we already commented
          const hasComment = comments.some(comment => 
            comment.user.login === 'github-actions[bot]' && 
            comment.body.includes('AI Code Analysis')
          );
          
          if (!hasComment) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `🤖 **AI Code Analysis Complete**
              
              The AI-powered code analysis has completed successfully using Kage Keys for secure API access.
              
              **Scope Used:** \`openai:chat.create\`
              **Token Expires:** 30 minutes from generation
              **Security:** All API calls are audited and scoped`
            });
          }

  # Job 3: Automated deployment with scoped access
  deploy:
    runs-on: ubuntu-latest
    needs: [generate-tokens, ai-code-analysis]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install Kage Keys
      run: npm install -g @kagehq/keys
      
    - name: Deploy to AWS Lambda
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ needs.generate-tokens.outputs.aws-token }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      run: |
        echo "🚀 Deploying with scoped AWS access..."
        
        # Use the scoped AWS token for deployment
        # This token only has access to specific AWS services and actions
        echo "🔐 Using Kage Keys authenticated AWS token"
        echo "   Scope: aws:lambda.update,aws:s3.put,aws:cloudformation.create"
        echo "   Expires: 30 minutes from generation"
        
        # Your actual deployment logic here
        # The AWS token will be automatically used for AWS CLI/SDK operations
        
        echo "✅ Deployment completed successfully"
        
    - name: Update deployment status
      uses: actions/github-script@v7
      env:
        GITHUB_TOKEN: ${{ needs.generate-tokens.outputs.github-token }}
      with:
        script: |
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: context.deployment.id,
            state: 'success',
            environment: '${{ github.event.inputs.environment || 'staging' }}',
            description: 'Deployment completed using Kage Keys for secure AWS access'
          });

  # Job 4: Security and compliance reporting
  security-report:
    runs-on: ubuntu-latest
    needs: [generate-tokens, deploy]
    if: always() # Always run for compliance
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install Kage Keys
      run: npm install -g @kagehq/keys
      
    - name: Generate security report
      env:
        KAGE_KEYS_BROKER_URL: ${{ env.KAGE_KEYS_BROKER_URL }}
        KAGE_KEYS_BROKER_TOKEN: ${{ env.KAGE_KEYS_BROKER_TOKEN }}
      run: |
        echo "🔒 Generating security and compliance report..."
        
        # Use Kage Keys to audit the CI/CD process
        kage-keys logs \
          --broker-url "$KAGE_KEYS_BROKER_URL" \
          --broker-token "$KAGE_KEYS_BROKER_TOKEN" \
          --filter "agent:ci-*" \
          --start "${{ steps.generate-tokens.outputs.start-time }}" \
          --format json > security-audit.json
          
        echo "📊 Security audit log exported to security-audit.json"
        
        # Generate compliance report
        echo "📋 Compliance Report:" > compliance-report.md
        echo "===================" >> compliance-report.md
        echo "" >> compliance-report.md
        echo "- **Token Scope Validation:** ✅ All tokens used scoped access" >> compliance-report.md
        echo "- **Audit Logging:** ✅ All API calls logged and tracked" >> compliance-report.md
        echo "- **Token Expiration:** ✅ All tokens expired within 30 minutes" >> compliance-report.md
        echo "- **Least Privilege:** ✅ Each job used minimal required scopes" >> compliance-report.md
        
        echo "✅ Security and compliance report generated"

  # Job 5: Cleanup and token revocation
  cleanup:
    runs-on: ubuntu-latest
    needs: [generate-tokens, ai-code-analysis, deploy, security-report]
    if: always() # Always run cleanup
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install Kage Keys
      run: npm install -g @kagehq/keys
      
    - name: Revoke CI tokens
      env:
        KAGE_KEYS_BROKER_URL: ${{ env.KAGE_KEYS_BROKER_URL }}
        KAGE_KEYS_BROKER_TOKEN: ${{ env.KAGE_KEYS_BROKER_TOKEN }}
      run: |
        echo "🧹 Cleaning up CI tokens..."
        
        # Revoke all tokens used in this workflow
        # This ensures no lingering access
        kage-keys revoke-token \
          --broker-url "$KAGE_KEYS_BROKER_URL" \
          --broker-token "$KAGE_KEYS_BROKER_TOKEN" \
          --agent "ci-openai-bot" || true
          
        kage-keys revoke-token \
          --broker-url "$KAGE_KEYS_BROKER_URL" \
          --broker-token "$KAGE_KEYS_BROKER_TOKEN" \
          --agent "ci-github-bot" || true
          
        kage-keys revoke-token \
          --broker-url "$KAGE_KEYS_BROKER_URL" \
          --broker-token "$KAGE_KEYS_BROKER_TOKEN" \
          --agent "ci-aws-bot" || true
          
        echo "✅ All CI tokens revoked successfully"
